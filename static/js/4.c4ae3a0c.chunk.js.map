{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileData/Contact.jsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileData/ProfileData.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","classes","item","src","message","quantityLikes","maxLength10","maxLengthCreator","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","postsElements","posts","reverse","map","p","likesCount","id","postsBlock","values","dispatch","text","newPostText","reset","addPost","MyPostsContainer","connect","state","profilePage","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","statusForm","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","fieldStatus","onDoubleClick","Contact","contactTitle","contactValue","ProfileDataReduxForm","profile","error","type","Object","keys","contacts","key","EditProfileData","formData","saveProfile","then","exitOfEditMode","ProfileData","isOwner","goToEditMode","onClick","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileInfo","savePhoto","profileInfo","descriptionBlock","photos","large","DefaultIcon","photoUser","userName","fullName","target","files","length","aboutUser","initialValues","Preloader","Profile","classForProfileInfo","ProfileContainer","userId","this","match","params","userID","authorizedUserId","user","getStatus","refreshProfile","prevProps","prevState","React","Component","compose","auth","isAuth","withRouter","WithAuthRedirect"],"mappings":"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","file":"static/js/4.c4ae3a0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__2GpXQ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__B_MVT\",\"userName\":\"ProfileInfo_userName__2EWdc\",\"photoUser\":\"ProfileInfo_photoUser__20LnI\",\"aboutUser\":\"ProfileInfo_aboutUser__2gw2h\",\"fieldStatus\":\"ProfileInfo_fieldStatus__2V4j4\",\"statusForm\":\"ProfileInfo_statusForm__3MVNw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__35GIG\",\"posts\":\"MyPosts_posts__2EkbX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1ReU8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"classForProfileInfo\":\"Profile_classForProfileInfo__3yPKH\"};","import classes from './Post.module.css';\nconst Post = (props) => {\n    return (\n        <div className={classes.item}>\n            <img src='https://static.thenounproject.com/png/801390-200.png' />\n            {props.message}\n            <div>\n                <span>{props.quantityLikes} like</span>\n            </div>\n        </div>\n    )\n}\nexport default Post;","import React from 'react';\nimport classes from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport { reduxForm, Field, reset } from \"redux-form\";\nimport { required, maxLengthCreator } from '../../../Utils/Validators/Validator';\nimport { Textarea } from '../../Common/FormsControls/FormsControls';\n\nconst MyPosts = (props) => {\n    let postsElements = [...props.posts].reverse().map(p => (\n        <Post message={p.message} quantityLikes={p.likesCount} key={p.id} />));\n    let addNewPost = (values, dispatch) => {\n        let text = values.newPostText;\n        dispatch(reset(\"ProfileNewPostReduxForm\"));\n        props.addPost(text);\n    }\n    return (\n        <div className={classes.postsBlock}>\n            <h3>My posts</h3>\n            <AddPostReduxForm onSubmit={addNewPost}/>\n            <div className={classes.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst AddPost = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name=\"newPostText\" placeholder=\"Input text\"\n                    validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddPostReduxForm = reduxForm({\n    form: 'ProfileNewPostReduxForm'\n})(AddPost)\n\nexport default MyPosts;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addPost } from '../../../redux/profileReducer';\nimport MyPosts from './MyPosts';\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts);\n\nexport default MyPostsContainer;","import React, {useEffect, useState} from \"react\";\nimport classes from './ProfileInfo.module.css';\n\nconst ProfileStatusWithHooks = (props) => {\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n    const activatedEditMode = () => {\n        setEditMode(true);\n    }\n    const deactivatedEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n    return (\n        <div className={classes.statusForm}>\n            Status\n            {!editMode\n                ? <div>\n                    <div className={classes.fieldStatus} onDoubleClick={activatedEditMode} >\n                        {props.status}\n                    </div>\n                </div>\n                : <div>\n                    <input onChange={onStatusChange} autoFocus={true} value={status} onBlur={deactivatedEditMode} />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import { Field } from \"redux-form\";\r\n\r\nconst Contact = ({ contactTitle, contactValue, editMode, name }) => {\r\n    return (\r\n        <div>\r\n            {editMode \r\n                ? <div>{contactTitle}: <Field placeholder={contactTitle} name={name} component={\"input\"}/></div>\r\n                : contactValue && <div>{contactTitle}: {contactValue}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import Contact from \"./Contact\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport { Input } from \"../../../Common/FormsControls/FormsControls\";\r\n\r\nconst ProfileDataForm = ({ profile, handleSubmit, editMode, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>Full name: <Field placeholder={\"Full name\"} name=\"fullName\" component={\"input\"}/>\r\n            </div>\r\n            <div>About Me: <Field placeholder={\"About me\"} name=\"aboutMe\" component={\"textarea\"}/>\r\n            </div>\r\n            <div>Looking for a job: <Field name=\"lookingForAJob\" component={\"input\"} type=\"checkbox\"/></div>\r\n            <div>My professional skills: <Field placeholder={\"My professional skills\"} name=\"lookingForAJobDescription\" component={\"textarea\"}/></div>\r\n            <div>Contacts: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact error={error} key={key} contactTitle={key} contactValue={profile.contacts[key]} editMode={editMode} name={\"contacts.\" + key}/>\r\n            })}</div>\r\n            <div>\r\n                <button>Save</button>\r\n                {error && <div>{error}</div>}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm({\r\n    form: 'editProfile'\r\n})(ProfileDataForm)\r\n\r\nconst EditProfileData = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(() => {\r\n            props.exitOfEditMode();\r\n        });\r\n    }\r\n    return (\r\n        <ProfileDataReduxForm onSubmit={onSubmit} {...props}/>\r\n    )\r\n}\r\nexport default EditProfileData;","import Contact from \"./Contact\";\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode, editMode }) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                {isOwner && <button onClick={goToEditMode}>Edit</button>}\r\n            </div>\r\n            <div>About Me: {profile.aboutMe}</div>\r\n            <div>Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n            {profile.lookingForAJob && <div>My professional skills:\r\n                {profile.lookingForAJobDescription}</div>}\r\n            <div>Contacts: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} editMode={editMode}/>\r\n            })}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import React, { useState } from \"react\";\nimport classes from './ProfileInfo.module.css';\nimport DefaultIcon from './../../../icons/default_icon_user.png';\nimport Preloader from '../../Common/Preloader/Preloader';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport ProfileDataForm from \"./ProfileData/ProfileDataForm\";\nimport ProfileData from \"./ProfileData/ProfileData\";\n\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\n    let [editMode, setEditMode] = useState(false);\n\n    const goToEditMode = () => {\n        setEditMode(true);\n    }\n\n    const exitOfEditMode = () => {\n        setEditMode(false);\n    }\n\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n    if (!profile) {\n        return (\n            <Preloader />\n        )\n    }\n    else {\n        return (\n            <div className={classes.profileInfo}>\n                <div className={classes.descriptionBlock}>\n                    <img src={profile.photos.large != null ? profile.photos.large : DefaultIcon} className={classes.photoUser} />\n                    <div>\n                        <div className={classes.userName}>{profile.fullName}</div>\n                        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n                    </div>\n                </div>\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n                <div className={classes.aboutUser}>\n                    {editMode\n                        ? <ProfileDataForm profile={profile} exitOfEditMode={exitOfEditMode}\n                            saveProfile={saveProfile} editMode={editMode}\n                            initialValues={profile} />\n                        : <ProfileData profile={profile} isOwner={isOwner}\n                            goToEditMode={goToEditMode} editMode={editMode} />}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ProfileInfo;","import MyPostsContainer from './MyPosts/MyPostsContainer';\nimport classes from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nconst Profile = (props) => {\n    return (\n        <div className=\"mainContent\">\n            <ProfileInfo profile={props.profile} className={classes.classForProfileInfo}\n                status={props.status} updateStatus={props.updateStatus} \n                isOwner={props.isOwner} savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\nexport default Profile;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { compose } from 'redux';\nimport { user, updateStatus, getStatus, savePhoto, saveProfile } from '../../redux/profileReducer';\nimport { WithAuthRedirect } from '../HOC/WithAuthRedirect';\nimport Profile from './Profile';\n\nclass ProfileContainer extends React.Component {\n    refreshProfile() {\n        let userId = this.props.match.params.userID;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n        }\n        this.props.user(userId);\n        this.props.getStatus(userId);\n    }\n    componentDidMount() {\n        this.refreshProfile();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if(this.props.match.params.userID !== prevProps.match.params.userID)\n            this.refreshProfile();\n    }\n    render() {\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile} \n                    status={this.props.status} updateStatus={this.props.updateStatus}\n                    isOwner={!this.props.match.params.userID} savePhoto={this.props.savePhoto}\n                    saveProfile={this.props.saveProfile}/>\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose(\n    connect(mapStateToProps, { user, getStatus, updateStatus, savePhoto, saveProfile }),\n    withRouter,\n    WithAuthRedirect\n)(ProfileContainer);"],"sourceRoot":""}